#
# Control file template for Jet Set Willy
#
;
; SkoolKit control file for Jet Set Willy.
;
; Room descriptions based on reference material from Andrew Broad
; <http://webspace.webring.com/people/ja/andrewbroad/> and J. G. Harston
; <http://mdfs.net/Software/JSW/Docs/>.
;

; @start:32768
; @org:32768=32768
g 32768 Room buffer
D 32768 Initialised upon entry to a room by the routine at #R35068.
S 32768,128 Room layout (used by the routines at #R35068 and #R36203)
S 32896,32 Room name (used by the routine at #R35068)
S 32928,9 Background tile (used by the routines at #R36147, #R36288, #R36307 and #R38430, and also by the unused routine at #R37819)
S 32937,9 Floor tile (used by the routines at #R36147 and #R36288)
S 32946,9 Wall tile (used by the routines at #R36147, #R36288, #R36307 and #R36564)
S 32955,9 Nasty tile (used by the routines at #R36147, #R36288, #R36307 and #R38430)
S 32964,9 Ramp tile (used by the routines at #R36147, #R36203, #R36564 and #R38344)
S 32973,9 Conveyor tile (used by the routines at #R36147, #R36203 and #R36564)
S 32982,4 Conveyor definition (used by the routines at #R36564 and #R38137)
S 32986,4 Ramp definition (used by the routines at #R36203, #R36564 and #R38344)
B 32990,1 Border colour (used by the routine at #R35068)
S 32991,2 Unused
S 32993,8 Object graphic (used by the routine at #R37841)
B 33001,1 Room to the left (used by the routine at #R38026)
B 33002,1 Room to the right (used by the routine at #R38046)
B 33003,1 Room above (used by the routines at #R37310 and #R38064)
B 33004,1 Room below (used by the routine at #R38098)
S 33005,3 Unused
S 33008,16 Guardian definitions (used by the routine at #R35068)
g 33024 Guardian buffer
D 33024 Used by the routines at #R35068, #R37056 and #R37310.
S 33024,64
B 33088 Terminator
s 33089
w 33280 Screen buffer address lookup table
D 33280 Used by the routines at #R35914, #R37310 and #R38455.
W 33280,256,16
b 33536 Rope animation table
D 33536 Used by the routine at #R37310.
B 33536,256,16
c 33792 The game has just loaded
D 33792 After the game has loaded, this is where it all starts.
  33792 Disable interrupts
  33793,11 Place the address of the routine at #R34463 on the stack
  33804,9 Set #REGhl=34048 in a roundabout way
  33813,10 Read through addresses 34048-65535, without changing their contents; perhaps this code was once used to descramble the contents of pages 133-255, but now all it does is introduce a pause of about 0.47s before displaying the code entry screen
  33823 Make an indirect jump to #R34463
g 33824 Current room number
D 33824 Used by the routines at #R34762, #R35068, #R35591, #R37310, #R37841, #R38026, #R38046, #R38064, #R38098, #R38196, #R38276, #R38298 and #R38455.
b 33825 Conveyor data
D 33825 Used by the routine at #R36564.
b 33841 Triangle UDGs
D 33841 Used by the routine at #R34762.
D 33841 #UDGTABLE {{ #UDG33841,56(triangle0) | #UDG33849,56(triangle1) | #UDG33857,56(triangle2) | #UDG33865,56(triangle3) }} TABLE#
t 33873 'AIR'
D 33873 This message is not used.
t 33876 '+++++ Press ENTER to Start +++++...'
D 33876 Used by the routine at #R34762.
T 33908
T 33942,38,B1:37
T 33980
T 34024
T 34050
T 34100
t 34132 'Items collected 000 Time 00:00 m'
D 34132 Used by the routine at #R35068.
t 34164 'Game'
D 34164 Used by the routine at #R35914.
t 34168 'Over'
D 34168 Used by the routine at #R35914.
g 34172 Number of items collected
D 34172 Initialised by the routine at #R34762, printed by the routine at #R35245, and updated by the routine at #R37841.
T 34172
g 34175 Current time
D 34175 Initialised by the routine at #R35068, and printed and updated by the routine at #R35245.
T 34175
t 34181 ' 7:00a'
D 34181 Copied by the routine at #R35068 to #R34175.
t 34187 'Enter Code at grid location#SPACE5'
D 34187 Used by the routine at #R34463.
t 34219 'Sorry, try code at location#SPACE5'
D 34219 Used by the routine at #R34463.
g 34251 Minute counter
D 34251 Used by the routines at #R34762, #R35245, #R37841, #R38196, #R38276 and #R38298.
g 34252 Lives remaining
D 34252 Used by the routines at #R34762, #R35211, #R35591 and #R35841.
g 34253 Screen flash counter
D 34253 Unused and always zero; the code at #R35339 makes the screen flash in Manic Miner fashion if this address holds a non-zero value.
g 34254 Kempston joystick indicator
D 34254 Initialised by the routine at #R34762, and checked by the routines at #R36564 and #R38601. Holds 1 if a joystick is present, 0 otherwise.
g 34255 Willy's pixel y-coordinate
D 34255 Used by the routines at #R34762, #R35245, #R35591, #R36307, #R36564, #R37310, #R38064, #R38098, #R38196, #R38344 and #R38455.
g 34256 Various flags
D 34256 #TABLE(default,centre) {{ =h Bit(s) | =h Meaning | =h Used by }} {{ 0 | Direction Willy is facing (reset=right, set=left) | #R36564, #R38455 }} {{ 1 | Unknown | #R36564, #R37310 }} {{ 2-7 | Unused | }} TABLE#
g 34257 Airborne status indicator
D 34257 Used by the routines at #R34762, #R35591, #R36307, #R36564, #R37046, #R37310, #R38064, #R38098 and #R38344.
g 34258 Willy's animation frame
D 34258 Used by the routines at #R35245, #R36564, #R37310, #R38344 and #R38455.
g 34259 Willy's coordinates in the attribute buffer at 23552
D 34259 Used by the routines at #R34762, #R36307, #R36564, #R37310, #R38026, #R38046, #R38064, #R38098, #R38196, #R38276, #R38344 and #R38455.
g 34261 Jumping animation counter
D 34261 Used by the routines at #R36307 and #R36564.
g 34262 Rope status indicator
D 34262 Initialised by the routine at #R35068, checked by the routine at #R36307, and checked and set by the routines at #R36564 and #R37310.
g 34263 Willy's state on entry to the room
D 34263 Initialised by the routine at #R35068, and copied back into #LINK:GameStatusBuffer#34255(34255-34261) by the routine at #R35841.
g 34270 256 minus the number of objects remaining
D 34270 Used by the routines at #R34762 and #R37841.
g 34271 Game mode indicator
D 34271 Used by the routines at #R34762, #R35245, #R36564, #R37841, #R38196, #R38276 and #R38298.
D 34271 #TABLE(default,centre) {{ =h Value | =h Meaning }} {{ 0 | Normal }} {{ 1 | All objects collected }} {{ 2 | Willy is running to the toilet }} {{ 3 | Willy's head is down the toilet }} TABLE#
g 34272 Inactivity timer
D 34272 Initialised by the routine at #R34762, and updated by the routines at #R35245, #R35591 and #R36564 (only when the in-game music is not playing).
g 34273 In-game music note index
D 34273 Initialised by the routine at #R34762, used by the routine at #R35211, and updated by the routine at #R35591.
g 34274 Sound flags
D 34274 #TABLE(default,centre) {{ =h Bit(s) | =h Meaning | =h Used by }} {{ 0 | Keypress flag (reset=H-ENTER being pressed, set=no key pressed) | #R34762, #R35591 }} {{ 1 | In-game music flag (reset=music on, set=music off) | #R35591 }} {{ 2-7 | Unused | }} TABLE#
g 34275 WRITETYPER key counter
D 34275 Used by the routines at #R35245 and #R35591.
g 34276 Temporary workspace
D 34276 Used by the routines at #R34499 and #R34620 to hold the entry code; also used by the routines at #R34762 and #R35914.
b 34277 WRITETYPER
D 34277 Used by the routine at #R35591.
B 34277,b2
B 34279,b2 W
B 34281,b2 R
B 34283,b2 I
B 34285,b2 T
B 34287,b2 E
B 34289,b2 T
B 34291,b2 Y
B 34293,b2 P
B 34295,b2 E
B 34297,b2 R
b 34299 Title screen tune data
D 34299 Used by the routine at #R38562.
B 34299,100,16
b 34399 In-game tune data
D 34399 Used by the routine at #R35591.
B 34399,64,16
c 34463 Give two chances to enter a correct code
D 34463 Used by the routine at #R33792.
  34463,13 Clear the display file and attribute file
  34476 Point #REGix at the message at #R34187 ("Enter Code at grid location#SPACE(5)")
  34480 Display the code entry screen and collect a four-digit code from the user
  34483 Start the game if the code is correct
  34486 Point #REGix at the message at #R34219 ("Sorry, try code at location#SPACE(5)")
  34490 Display the code entry screen and collect another four-digit code from the user
  34493 Start the game if the code is correct
  34496 Otherwise reset the machine
c 34499 Display the code entry screen
D 34499 Used by the routine at #R34463. Displays the code entry screen and waits for a code to be entered. Returns with the zero flag set if the code entered is correct.
R 34499 IX Address of the message to print (#R34187 or #R34219)
  34499,8 Print the message pointed to by #REGix at (8,0)
  34507,11 Print the graphic for the '1' key at (10,2)
  34518,6 Print the graphic for the '2' key at (10,5)
  34524,6 Print the graphic for the '3' key at (10,8)
  34530,6 Print the graphic for the '4' key at (10,11)
  34536,11 Copy the 128 attribute bytes from #R39808 to the screen (lines 8, 9, 10 and 11)
  34547 Collect the LSB of the system variable FRAMES
  34550,5 Add 37 to this value and replace it; this ensures that the value collected on the second pass through this routine is different from the value collected on the first pass
  34555 Is the value between 0 and 178?
  34557 Jump if so
  34559 Otherwise subtract 180; note that if the original value of the LSB of the system variable FRAMES was 142, this leaves #REGa holding 255, which is a #BUG#invalidGridLocation
  34561 Now #REGl holds either 255 or some number between 0 and 178
  34562 Point #REGhl at one of the entries in the table at #R40448 (or at 40703 if #REGl=255)
  34564 Pick up the table entry
  34565 Add #REGl to obtain the actual code
  34566 Store the code at #R34276
  34569 Copy the code index to #REGc; this will be used to compute the grid location
  34570,13 Calculate the ASCII code of the grid location number (0-9) in #REGe
  34583,7 Print the grid location number at (8,30)
  34590,3 Calculate the ASCII code of the grid location letter (A-R) in #REGa
  34593,6 Print the grid location letter at (8,29)
D 34599 Here we enter a loop that prints a 2x2 coloured block at (10,16), (10,19), (10,22) or (10,25) whenever '1', '2', '3' or '4' is pressed, or returns to the calling routine at #R34463 if ENTER is pressed.
  34599 Point #REGix at the attribute file location of the first coloured block at (10,16)
  34603 Print a coloured block when '1', '2', '3' or '4' is pressed, or return to #R34463 if ENTER is pressed
  34606,6 Move #REGix along to the location of the next coloured block
  34612,4 Have we just printed the fourth coloured block at (10,25)?
  34616 If not, jump back to print the next one
  34618 Otherwise rewind #REGix to the location of the first coloured block
c 34620 Read the keyboard during code entry
R 34620 IX Attribute file address of the flashing 2x2 block
D 34620 Used by the routine at #R34499. Waits for '1', '2', '3', '4' or ENTER to be pressed and either prints a coloured block or validates the entered code. Returns to the routine at #R34463 if ENTER is being pressed, with the zero flag reset if the entered code is correct.
  34620,5 Read keys 1-2-3-4-5
  34625,4 Is '1', '2', '3' or '4' (still) being pressed?
  34629 Jump back if so
  34631,4 Read keys H-J-K-L-ENTER
  34635 Is ENTER being pressed?
  34637,2 Jump if not
  34639 Pick up the attribute byte of the fourth 2x2 block at (10,25)
  34642,4 Has the fourth digit been entered yet?
  34646 Jump if not
D 34648 We have four coloured blocks, and ENTER is being pressed. Time to validate the entered code.
  34648,8 Compute bits 0 and 1 of the entered code from the attribute byte of the fourth coloured block at (10,25) and store them in #REGc
  34656,10 Compute bits 4 and 5 of the entered code from the attribute byte of the second coloured block at (10,19) and store them in #REGc (alongside bits 0 and 1)
  34666,10 Compute bits 2 and 3 of the entered code from the attribute byte of the third coloured block at (10,22) and store them in #REGc (alongside bits 0, 1, 4 and 5)
  34676,10 Compute bits 6 and 7 of the entered code from the attribute byte of the first coloured block at (10,16) in #REGa
  34686 Drop the return address from the stack
  34687 Merge bits 0-5 of the entered code into #REGa; now #REGa holds all 8 bits of the entered code
  34688 Point #REGhl at #R34276 (where the correct entry code is stored)
  34691 Set the zero flag if the entered code matches
  34692 Return to the routine at #R34463
D 34693 Here we check whether '1', '2', '3' or '4' is being pressed.
  34693,16 Make sure the current 2x2 block is flashing
  34709,5 Read keys 1-2-3-4-5
  34714,2 Keep only bits 0-3 (keys 1-2-3-4)
  34716 #REGe=8 (INK 0: PAPER 1)
  34718 Is '1' alone being pressed?
  34720 Jump if so
  34722 #REGe=16 (INK 0: PAPER 2)
  34724 Is '2' alone being pressed?
  34726 Jump if so
  34728 #REGe=24 (INK 0: PAPER 3)
  34730 Is '3' alone being pressed?
  34732 Jump if so
  34734 #REGe=32 (INK 0: PAPER 4)
  34736 Is '4' alone being pressed?
  34738,3 If not, jump back to check the ENTER key
D 34741 Exactly one of the number keys '1', '2', '3' or '4' is being pressed. #REGe holds the corresponding attribute byte to use for the coloured block.
  34741,12 Set the colour of the 2x2 block (no longer flashing)
  34753,8 Pause for about 0.02s
c 34762 Display the title screen and play the theme tune
  34869,12 Print "+++++ Press ENTER to Start +++++" (see #R33876) at (19,0)
  34952 There are eight pixel rows in a triangle UDG
  34954,3 Draw a triangle UDG on the screen
  34984 Point #REGhl at the theme tune data at #R34299
  34987 Play the theme tune
  34990,3 Start the game if ENTER, 0 or the fire button was pressed
  34997,3 Cycle the INK and PAPER colours
  35033,7 Prepare a value between 50 and 81 in #REGa (for the routine at #R38622)
  35040 Make a sound effect
  35043,5 Read keys H-J-K-L-ENTER and 6-7-8-9-0
  35048 Keep only bit 0 of the result (ENTER, 0)
  35050 Was ENTER or 0 pressed?
  35052,2 Jump if so to start the game
c 35068 Start the game
  35173,12 Print the room name at (16,0)
  35185,12 Print "Items collected 000 Time 00:00 m" (see #R34132) at (19,0)
c 35211 Draw remaining lives
  35211 Pick up the number of lives remaining from #R34252
  35214 Set #REGhl to the display file address at which to draw the first Willy sprite
  35217 Are there any lives remaining?
  35218 Return if not
  35219 Initialise #REGb to the number of lives remaining
D 35220 The sprite-drawing loop begins.
  35220 #REGc=0; this tells the sprite-drawing routine at #R37974 to overwrite any existing graphics
  35222,2 Save #REGhl and #REGbc briefly
  35224 Pick up the in-game music note index from #R34273; this will determine the animation frame for the Willy sprites
  35227,5 Now #REGa=0 (frame 0), 32 (frame 1), 64 (frame 2) or 96 (frame 3)
  35232,3 Point #REGde at the corresponding Willy sprite (at #R40192, #R40224, #R40256 or #R40288)
  35235 Draw the Willy sprite on the screen
  35238,2 Restore #REGhl and #REGbc
  35240,2 Move #REGhl along to the location at which to draw the next Willy sprite
  35242,2 Jump back to draw any remaining sprites
c 35245 Main loop (1)
  35281 Pick up Willy's pixel y-coordinate from #R34255
  35284 Is it 225 or greater?
  35286 If so, move Willy into the room above
  35289 Pick up the game mode indicator from #R34271
  35292 Is Willy's head down the toilet?
  35294 If not, check and set the attribute bytes for Willy's sprite in the buffer at 23552
  35297 Pick up the game mode indicator from #R34271
  35300 Is Willy on his way to the toilet?
  35302 If so, check whether he's reached it yet
  35305,3 Deal with special rooms (#R58112(Master Bedroom), #R57600(The Bathroom))
  35377,12 Print the current time (see #R34175) at (19,25)
  35389,12 Print the number of items collected (see #R34172) at (19,16)
  35499,5 Read keys SHIFT-Z-X-C-V
  35504 Save the result in #REGe
  35505,4 Read keys B-N-M-SS-SPACE
  35509 Combine the results
  35510 Are SHIFT and SPACE being pressed?
  35512,3 Jump if so to quit the game
  35524,4 Read keys A-S-D-F-G
  35528,4 Are any of these keys being pressed?
  35532,2 Jump if not
  35537,4 Read every half-row of keys except A-S-D-F-G
  35541,4 Are any of these keys being pressed?
  35545,2 Jump if so
  35553 Pick up the WRITETYPER key counter from #R34275
  35556 Has WRITETYPER been keyed in yet?
  35558,3 If not, cycle the INK and PAPER colours
c 35563 Cycle the INK and PAPER colours
D 35563 Used by the routines at #R34762 (while scrolling the instructions across the screen) and #R35245 (while the game is paused).
  35563 Point #REGhl at the first byte of the attribute file
  35566 Pick up this byte
  35567 Keep only bits 0-2 (the INK colour)
  35569 Set the border colour to match
D 35571 Now we loop over every byte in the attribute file.
  35571 Pick up an attribute file byte
  35572,4 Cycle the INK colour forward by three
  35576 Save the new INK colour in #REGd
  35577 Pick up the attribute file byte again
  35578,4 Cycle the PAPER colour forward by three (and turn off any BRIGHT colours)
  35582 Merge in the new INK colour
  35583 Save the new attribute byte
  35584 Point #REGhl at the next byte in the attribute file
  35585,3 Have we reached the end of the attribute file yet?
  35588,2 If not, jump back to modify the next byte
c 35591 Main loop (2)
  35620 Read keys H-J-K-L-ENTER
  35622,4 Are any of these keys being pressed?
  35626,2 Jump if not
  35696,5 Read keys 6-7-8-9-0
  35701 Is '9' being pressed?
  35703 Jump if not
  35706 Keep only bit 4 (corresponding to the '6' key)
  35708 Flip bit 4
  35710 Move it into bit 5
  35711,1 Now bit 5 of #REGd is set if '6' is being pressed
  35720,5 Read keys 1-2-3-4-5
  35725,3 Keep only bits 0-4 and flip them
  35728 Copy bit 5 of #REGd into #REGa; now #REGa holds the number of the room to teleport to
  35729,3 Store the room number at #R33824
  35772,5 Read keys Q-W-E-R-T
  35784 Are any of these keys (Q-W-E-R-T) being pressed?
  35786,3 If not, jump back to the start of the main loop
  35802,4 Read keys Y-U-I-O-P
  35813 Are any of these keys (Y-U-I-O-P) being pressed?
  35815,3 If not, jump back to the start of the main loop
c 35841 Lose a life
c 35914 Display the game over sequence
  35931,11 Draw Willy at (12,15)
  35942,11 Draw the barrel underneath Willy at (14,15)
  35968,8 Draw the foot
  36043,12 Print "Game" (see #R34164) at (6,10)
  36055,12 Print "Over" (see #R34168) at (6,18)
c 36147 Draw the current room to the screen buffer at 28672
c 36203 Fill the buffer at 24064 with attribute bytes for the current room
D 36203 Used by the routine at #R36147. Fills the buffer at 24064 with attribute bytes for the background, floor, wall, nasty, conveyor and ramp tiles in the current room.
  36203 Point #REGhl at the first room layout byte in the room buffer at #R32768
  36206 Point #REGix at the first byte of the attribute buffer at 24064
D 36210 The following loop copies the attribute bytes for the background, floor, wall and nasty tiles into the buffer at 24064.
  36210 Pick up a room layout byte
  36211,2 Move bits 6 and 7 into bits 0 and 1
  36213 Copy the attribute byte for this tile into the buffer at 24064
  36216 Pick up the room layout byte again
  36217,4 Move bits 4 and 5 into bits 0 and 1
  36221 Copy the attribute byte for this tile into the buffer at 24064
  36224 Pick up the room layout byte again
  36225,2 Move bits 2 and 3 into bits 0 and 1
  36227 Copy the attribute byte for this tile into the buffer at 24064
  36230 Pick up the room layout byte again; this time the required bit-pair is already in bits 0 and 1
  36231 Copy the attribute byte for this tile into the buffer at 24064
  36234 Point #REGhl at the next room layout byte
  36235,3 Have we processed all 128 room layout bytes yet?
  36238 If not, jump back to process the next one
D 36240 Next consider the conveyor tiles (if any).
  36240 Pick up the length of the conveyor
  36243 Is there a conveyor in the room?
  36244 Jump if not
  36246 Pick up the coordinates of the left end of the conveyor
  36249 #REGb will count the conveyor tiles
  36250 Pick up the attribute byte for the conveyor tile from #R32973
  36253,4 Copy the attribute bytes for the conveyor tiles into the buffer at 24064
D 36257 And finally consider the ramp tiles (if any).
  36257 Pick up the length of the ramp
  36260 Is there a ramp in the room?
  36261 Return if not
  36262 Pick up the coordinates of the bottom of the ramp
  36265,5 Pick up the direction byte of the ramp definition; #REGa=0 (ramp goes up to the left) or 1 (ramp goes up to the right)
  36270,6 Now #REGde=-33 (ramp goes up to the left) or -31 (ramp goes up to the right)
  36276 Pick up the length of the ramp
  36279 #REGb will count the ramp tiles
  36280 Pick up the attribute byte for the ramp tile from #R32964
  36283,4 Copy the attribute bytes for the ramp tiles into the buffer at 24064
c 36288 Copy a room attribute byte into the buffer at 24064
D 36288 Used by the routine at #R36203. On entry, #REGa holds a room layout byte, rotated such that the bit-pair corresponding to the tile of interest is in bits 0 and 1.
R 36288 A Room layout byte (rotated)
R 36288 IX Attribute buffer address (24064-24575)
  36288 Keep only bits 0 and 1; #REGa=0 (background), 1 (floor), 2 (wall) or 3 (nasty)
  36290,7 Multiply by 9 and add 160; now #REGa=160 (background), 169 (floor), 178 (wall) or 187 (nasty)
  36297,3 Point #REGde at the attribute byte for the background, floor, wall or nasty tile in the room buffer at #R32768
  36300,4 Copy the attribute byte into the buffer at 24064
  36304,2 Move #REGix along to the next byte in the attribute buffer
c 36307 Move Willy (1)
  36323 Pick up the jumping animation counter (0-18) from #R34261
  36326 Discard bit 0
  36328 Now -8<=#REGa<=10 (and #REGa is even)
  36330,5 Adjust Willy's pixel y-coordinate (at #R34255)
  36335 Is the new y-coordinate 240 or greater?
  36337,3 If so, move Willy into the room above
  36413 Pick up Willy's coordinates from #R34259
  36416,4 Add 64; this points #REGhl at the spot two cells below Willy's current position
  36420 Is this location below the floor of the current room?
  36422,3 If so, move Willy into the room below
c 36564 Move Willy (2)
  36574 Pick up the airborne status indicator from #R34257
  36577 Is it 12 or greater?
  36579,3 If so, kill Willy
  36602,5 Read keys Y-U-I-O-P
  36621,5 Read keys Q-W-E-R-T
  36634,4 Read keys 1-2-3-4-5 and 6-7-8-9-0
  36643,4 Read keys 6-7-8-9-0
  36651,2 Read keys 6-7-8-9-0
  36658 Collect the Kempston joystick indicator from #R34254
  36661 Is the joystick connected?
  36662 Jump if not
  36664,5 Collect input from the joystick
  36669,2 Keep only bits 0 (right) and 1 (left)
  36717,5 Read keys SHIFT-Z-X-C-V and B-N-M-SS-SPACE
  36722,4 Are any of these keys being pressed?
  36726 Jump if so
  36728,4 Read keys 6-7-8-9-0
  36732 Is '0' being pressed?
  36734,2 Jump if so
  36736 Collect the Kempston joystick indicator from #R34254
  36739 Is the joystick connected?
  36740 Jump if not
  36742,5 Collect input from the joystick
  36747 Is the fire button being pressed?
  36749,2 Jump if not
D 36751 A jump key or the fire button is being pressed. Time to make Willy jump.
  36874 Collect Willy's coordinates from #R34259
  36877,3 Is Willy's screen x-coordinate 0 (on the far left)?
  36880,3 If so, move Willy into the room to the left
  36984 Collect Willy's coordinates from #R34259
  36987 Add or subtract 32
  36988,5 Is Willy's screen x-coordinate 30 (on the far right)?
  36993,3 If so, move Willy into the room on the right
c 37046 Kill Willy
D 37046 Used by the routine at #R38430 when Willy hits a nasty.
  37046 Drop the return address from the stack
D 37047 This entry point is used by the routines at #R36564, #R37310 (when Willy hits a guardian) and #R38196 (when Willy gets too close to Maria).
  37047 Drop the return address from the stack
  37048,5 Set the airborne status indicator at #R34257 to 255 (meaning Willy has had a fatal accident)
  37053 Jump back into the main loop
c 37056 Move guardians
c 37310 Draw guardians to the screen buffer at 24576
  37422 Draw the guardian
  37425,3 Kill Willy if the guardian collided with him
u 37819 Unused routine
D 37819 This routine is not used, but if it were, it would set the ink colour for a 3x2 block of cells, maintaining the paper, bright and flash attributes of the current room background.
R 37819 A INK colour (0-7)
R 37819 HL Attribute file or attribute buffer address
C 37819 Store the ink colour (bits 0-2)
C 37820 Collect the current room's background tile attribute from #R32928
C 37823 Keep only bits 3-7 (PAPER, BRIGHT, FLASH)
C 37825 Merge the INK bits
C 37826 Store the resultant attribute byte
C 37827 Prepare #REGde for later addition
C 37830,2 Move right one cell and store the attribute byte there
C 37832,2 Move left one cell and down a row and store the attribute byte there
C 37834,2 Move right one cell and store the attribute byte there
C 37836,2 Move left one cell and down a row and store the attribute byte there
C 37838,2 Move right one cell and store the attribute byte there
C 37840
c 37841 Draw objects in the current room
  37960 Save #REGhl briefly
  37961 Point #REGhl at the object graphic for the current room (at #R32993)
  37964 There are eight pixel rows to copy
  37966 Draw the object to the screen buffer at 24576
  37969,1 Restore #REGhl
c 37974 Draw a sprite
D 37974 Used by the routines at #R34499 (to draw the number key graphics on the code entry screen), #R35211 (to draw the remaining lives), #R35914 (to draw Willy, the boot and the barrel during the game over sequence), #R37310 (to draw guardians in the current room) and #R38196 (to draw Maria in #R58112(Master Bedroom)). If #REGc=1 on entry, this routine returns with the zero flag reset if any of the set bits in the sprite being drawn collides with a set bit in the background.
R 37974 C Drawing mode: 0 (overwrite) or 1 (blend)
R 37974 DE Address of sprite graphic data
R 37974 HL Address to draw at
  37974 There are 16 rows of pixels to draw
  37976 Set the zero flag if we're in overwrite mode
  37978 Pick up a sprite graphic byte
  37979 Jump if we're in overwrite mode
  37981,2 Return with the zero flag reset if any of the set bits in the sprite graphic byte collide with a set bit in the background (e.g. in Willy's sprite)
  37983 Pick up the sprite graphic byte again
  37984 Blend it with the background byte
  37985 Copy the graphic byte to its destination cell
  37986 Move #REGhl along to the next cell on the right
  37987 Point #REGde at the next sprite graphic byte
  37988 Set the zero flag if we're in overwrite mode
  37990 Pick up a sprite graphic byte
  37991 Jump if we're in overwrite mode
  37993,2 Return with the zero flag reset if any of the set bits in the sprite graphic byte collide with a set bit in the background (e.g. in Willy's sprite)
  37995 Pick up the sprite graphic byte again
  37996 Blend it with the background byte
  37997 Copy the graphic byte to its destination cell
  37998,2 Move #REGhl to the next pixel row down in the cell on the left
  38000 Point #REGde at the next sprite graphic byte
  38001,3 Have we drawn all eight pixel rows in this pair of cells yet?
  38004 Jump if not
  38006,8 Otherwise move #REGhl to the top pixel row in the cell below
  38014 Was the last pair of cells at y-coordinate 7 or 15?
  38016 Jump if not
  38018,4 Otherwise adjust #REGhl to account for the movement from the top or middle third of the screen to the next one down
  38022 Jump back until all 16 rows of pixels have been drawn
  38024,1 Set the zero flag (to indicate no collision)
c 38026 Move Willy into the room to the left
  38026 Pick up the number of the room to the left from #R33001
  38029 Make it the current room number by copying it to #R33824
  38032,10 Adjust Willy's screen x-coordinate (at #R34259) to 30 (on the far right)
  38042 Drop the return address (#R35281, in the main loop) from the stack
  38043 Draw the room and re-enter the main loop
c 38046 Move Willy into the room to the right
  38046 Pick up the number of the room to the right from #R33002
  38049 Make it the current room number by copying it to #R33824
  38052,8 Adjust Willy's screen x-coordinate (at #R34259) to 0 (on the far left)
  38060 Drop the return address (#R35281, in the main loop) from the stack
  38061 Draw the room and re-enter the main loop
c 38064 Move Willy into the room above
  38064 Pick up the number of the room above from #R33003
  38067 Make it the current room number by copying it to #R33824
  38070,15 Willy should now appear on the bottom floor of the room, so adjust his coordinates (at #R34259) accordingly
  38085,5 Set Willy's pixel y-coordinate (at #R34255) to 208
  38090,4 Reset the airborne status indicator at #R34257
  38094 Drop the return address (either #R35281 or #R35289, in the main loop) from the stack
  38095 Draw the room and re-enter the main loop
c 38098 Move Willy into the room below
  38098 Pick up the number of the room below from #R33004
  38101 Make it the current room number by copying it to #R33824
  38104,4 Set Willy's pixel y-coordinate (at #R34255) to 0
  38108 Pick up the airborne status indicator from #R34257
  38111 Is it 11 or greater?
  38113 Jump if so
  38115,5 Otherwise set the airborne status indicator to 2
  38120,13 Willy should now appear at the top of the room, so adjust his coordinates (at #R34259) accordingly
  38133 Drop the return address (#R35281, in the main loop) from the stack
  38134 Draw the room and re-enter the main loop
c 38137 Move conveyors
c 38196 Deal with special rooms (Master Bedroom, The Bathroom)
  38196 Pick up the number of the current room from #R33824
  38199 Are we in #R58112(Master Bedroom)?
  38201 Jump if not
  38203 Pick up the game mode indicator from #R34271
  38206 Has Willy collected all the items?
  38207 Jump if so
D 38209 Willy hasn't collected all the items yet, so Maria is on guard.
  38209 Pick up the minute counter from #R34251; this will determine Maria's animation frame
  38212,8 Keep only bit 1, move it to bit 5, and set bit 7
  38220 Now #REGe=128 (foot down) or 160 (foot raised)
  38221 Pick up Willy's pixel y-coordinate from #R34255
  38224 Is Willy on the floor below the ramp?
  38226 Jump if so
  38228 #REGe=192 (raising arm)
  38230 Is Willy on the ramp?
  38232 Jump if so
  38234 #REGe=224 (arm raised)
  38236 Point #REGde at the sprite graphic data (#R40064, #R40096, #R40128 or #R40160)
  38238,8 Draw Maria at (11,14) in the screen buffer at 24576
  38246,3 Kill Willy if Maria collided with him
  38249 #REGh=#REGl=69 (INK 5: PAPER 0: BRIGHT 1)
  38252 Set the attribute bytes for the top half of Maria's sprite in the buffer at 23552
  38255 #REGh=#REGl=7 (INK 7: PAPER 0: BRIGHT 0)
  38258,3 Set the attribute bytes for the bottom half of Maria's sprite in the buffer at 23552
D 38262 Willy has collected all the items, so Maria is gone.
  38262,5 Pick up Willy's screen x-coordinate from #R34259
  38267 Has Willy reached the bed (at x=5) yet?
  38269 Return if not
  38270,5 Update the game mode indicator at #R34271 to 2 (Willy is running to the toilet)
c 38276 Check whether Willy has reached the toilet
D 38276 Called by the routine at #R35245 when Willy is on his way to the toilet.
  38276 Pick up the number of the current room from #R33824
  38279 Are we in #R57600(The Bathroom)?
  38281 Return if not
  38282 Pick up Willy's coordinates from #R34259
  38285 Is Willy's screen x-coordinate 28 (where the toilet is)?
  38287 Return if not
D 38288 Willy has reached the toilet.
  38288,4 Reset the minute counter at #R34251 to 0
  38292,5 Update the game mode indicator at #R34271 to 3 (Willy's head is down the toilet)
c 38298 Animate the toilet in The Bathroom
  38298 Pick up the number of the current room from #R33824
  38301 Are we in #R57600(The Bathroom)?
  38304 Pick up the minute counter from #R34251; this will determine the animation frame to use for the toilet
  38307,5 Keep only bit 0 and move it to bit 5
  38312 Now #REGe=0 or 32
  38313 Pick up the game mode indicator from #R34271
  38316 Is Willy's head down the toilet?
  38318 Jump if not
  38320 Now #REGe=64 or 96
  38322 Point #REGde at the sprite to use (#R42496, #R42528, #R42560 or #R42592)
  38324,10 Draw the toilet at (13,28) in the screen buffer at 24576
  38334 #REGh=#REGl=7 (INK 7: PAPER 0)
  38337,6 Set the attribute bytes for the toilet in the buffer at 23552
  38303 Return if not
c 38344 Check and set the attribute bytes for Willy's sprite in the buffer at 23552
D 38344 Used by the routine at #R35245. Sets the attribute bytes in the buffer at 23552 for the six cells (in three rows of two) occupied by or under Willy's sprite, or kills Willy if any of the cells contains a nasty.
  38344 Pick up Willy's coordinates in the attribute buffer at 23552 from #R34259
  38347 Initialise #REGb to 0 (in case Willy is not standing on a ramp)
  38349 Pick up the direction byte of the ramp definition for the current room from #R32986
  38352,8 Point #REGhl at one of the cells under Willy's feet (the one on the left if the ramp goes up to the left, the one on the right if the ramp goes up to the right)
  38360 Pick up the ramp's attribute byte from #R32964
  38363 Is Willy on or just above the ramp?
  38364 Jump if not
  38366 Pick up the airborne status indicator from #R34257
  38369 Is Willy airborne?
  38370 Jump if so
D 38372 Willy is standing on a ramp. Calculate the offset that needs to be added to the y-coordinate stored at #R34255 to obtain Willy's true pixel y-coordinate.
  38372 Pick up Willy's current animation frame (0-3) from #R34258
  38375,5 #REGb=0, 4, 8 or 12
  38380 Pick up the direction byte of the ramp definition for the current room from #R32986
  38383,8 #REGa=#REGb (if the ramp goes up to the left) or 12-#REGb (if the ramp goes up to the right)
  38391 Copy this value to #REGb
D 38392 Now #REGb holds a y-coordinate offset of 0, 4, 8 or 12 if Willy is standing on a ramp, or 0 otherwise.
  38392 Pick up Willy's coordinates in the attribute buffer at 23552 from #R34259
  38395,3 Prepare #REGde for later addition
  38398 Set #REGc=15 for the top two rows of cells (to make the routine at #R38430 force white INK)
  38400 Check and set the attribute byte for the top-left cell
  38403 Move #REGhl to the next cell to the right
  38404 Check and set the attribute byte for the top-right cell
  38407 Move #REGhl down a row and back one cell to the left
  38408 Check and set the attribute byte for the mid-left cell
  38411 Move #REGhl to the next cell to the right
  38412 Check and set the attribute byte for the mid-right cell
  38415,3 Pick up Willy's pixel y-coordinate from #R34255
  38418,2 Add the y-coordinate offset calculated earlier (to get Willy's true pixel y-coordinate if he's standing on a ramp) and transfer the result to #REGc
  38420 Move #REGhl down a row and back one cell to the left
  38421 Check and set the attribute byte for the bottom-left cell
  38424 Move #REGhl to the next cell to the right
  38425 Check and set the attribute byte for the bottom-right cell
  38428 Draw Willy to the screen buffer at 24576
c 38430 Check and set the attribute byte for a cell occupied by Willy's sprite
D 38430 Used by the routine at #R38344. Sets the attribute byte in the buffer at 23552 for one of the six cells (in three rows of two) occupied by or under Willy's sprite, or kills Willy if the cell contains a nasty. On entry, #REGc holds either 15 if the cell is in the top two rows, or Willy's pixel y-coordinate if the cell is in the bottom row.
R 38430 C 15 or Willy's pixel y-coordinate
R 38430 HL Address of the attribute byte in the buffer at 23552
  38430 Pick up the attribute byte of the background tile in the current room from #R32928
  38433 Does this cell contain a background tile?
  38434 Jump if not
  38436,3 Set the zero flag if we are going to retain the INK colour in this cell; this happens only if the cell is in the bottom row and Willy's pixel y-coordinate is a multiple of 16
  38439 Jump if we are going to retain the current INK colour in this cell
  38441 Pick up the attribute byte of the background tile in the current room from #R32928
  38444 Set bits 0-2, making the INK white
  38446 Set the attribute byte for this cell in the buffer at 23552
  38447 Pick up the attribute byte of the nasty tile in the current room from #R32955
  38450 Has Willy hit a nasty?
  38451,3 Kill Willy if so
c 38455 Draw Willy to the screen buffer at 24576
c 38528 Print a message
R 38528 IX Address of the message
R 38528 C Length of the message
R 38528 DE Display file address
  38528 Collect a character from the message
  38531 Print it
  38534 Point #REGix at the next character in the message
  38536,5 Point #REGde at the next character cell (subtracting 8 from #REGd compensates for the operations performed by the routine at #R38545)
  38541 Have we printed the entire message yet?
  38542,2 If not, jump back to print the next character
c 38545 Print a single character
R 38545 A ASCII code of the character
R 38545 DE Display file address
  38545,8 Point #REGhl at the bitmap for the character (in the ROM)
  38553 There are eight pixel rows in a character bitmap
D 38555 This entry point is used by the routine at #R34762 to draw a triangle UDG on the title screen, and by the routine at #R37841 to draw an object in the current room.
  38555,6 Copy the character bitmap (or triangle UDG, or object graphic) to the screen (or screen buffer)
c 38562 Play the theme tune
D 38562 Used by the routine at #R34762. For each of the 99 bytes in the tune data table at #R34299, this routine produces two notes, each lasting approximately 0.15s; the second note is played at half the frequency of the first. Returns with the zero flag reset if ENTER, 0 or the fire button is pressed while the tune is being played.
R 38562 HL #R34299
  38562 Pick up the next byte of tune data from the table at #R34299
  38563 Has the tune finished?
  38565 Return (with the zero flag set) if so
  38566 #REGb=0 (short note duration counter), #REGc=100 (short note counter)
  38569 #REGa=0 (border colour and speaker state)
  38570 Save the byte of tune data in #REGe for retrieval during the short note loop
  38571 Initialise #REGd (pitch delay counter)
  38572,10 Produce a short note (approximately 0.003s) whose pitch is determined by the value in #REGe
  38582 Save #REGa briefly
  38583,3 Is the short note counter in #REGc (which starts off at 100) down to 50 yet?
  38586 Jump if not
  38588 Otherwise double the value in #REGe (which halves the note frequency)
  38590 Restore the value of #REGa
  38591 Decrement the short note counter in #REGc
  38592 Jump back unless we've finished playing 50 short notes at the lower frequency
  38594 Check whether ENTER, 0 or the fire button is being pressed
  38597 Return (with the zero flag reset) if it is
  38598 Move #REGhl along to the next byte of tune data
  38599 Jump back to play the next batch of 100 short notes
c 38601 Check whether ENTER, 0 or the fire button is being pressed
D 38601 Used by the routine at #R38562. Returns with the zero flag reset if ENTER, 0 or the fire button on the joystick is being pressed.
  38601 Collect the Kempston joystick indicator from #R34254
  38604 Is the joystick connected?
  38605 Jump if not
  38607 Collect input from the joystick
  38609 Is the fire button being pressed?
  38611 Return (with the zero flag reset) if so
  38612,5 Read keys H-J-K-L-ENTER and 6-7-8-9-0
  38617 Keep only bit 0 of the result (ENTER, 0)
  38619,2 Reset the zero flag if ENTER or 0 is being pressed
c 38622 Play an intro message sound effect
R 38622 A Value between 50 and 81
  38622 Save the value of #REGa in #REGe for later retrieval
  38623 We will output to port 254
  38625 Copy #REGa into #REGd; bits 0-2 of #REGd determine the initial border colour
  38626 Reset bit 4 of #REGd (initial speaker state)
  38628 Reset bit 3 of #REGd (initial MIC state)
  38630,1 Initialise #REGb (delay counter for the inner loop)
  38631 Is it time to flip the MIC and speaker and make the border black?
  38632 Jump if not
  38634 Set bits 3 (MIC) and 4 (speaker) of #REGd, and reset bits 0-2 (black border)
  38636 Set the MIC state, speaker state and border colour
  38638 Jump back until the inner loop is finished
  38640 Is the outer loop finished too?
  38641,2 Jump back if not
u 38644 Unused routine
C 38644,11 Copy the attribute buffer at 24064 to the top two-thirds of the screen
C 38655,13 Fill the top two-thirds of the display file with the byte value 24 (00011000)
C 38668 Prepare #REGbc for reading keys SHIFT-Z-X-C-V
C 38671 Read these keys
C 38673 Is 'X' being pressed?
C 38675 Jump if so to reset the machine
C 38678 Otherwise jump back to read the keyboard again
s 38680
b 38912 Attributes for the top two-thirds of the title screen
D 38912 Used by the routine at #R34762.
B 38912,512,16
b 39424 Attributes for the bottom third of the screen during gameplay
D 39424 Used by the routines at #R35068 and #R35591.
B 39424,256,16
b 39680 Number key graphics
D 39680 Used by the routine at #R34499.
D 39680 #UDGTABLE {{ #UDGARRAY2,65,,2;39680;39681,121;39696;39697(number_key0) | #UDGARRAY2,66,,2;39712;39713,122;39728;39729(number_key1) | #UDGARRAY2,3,,2;39744;39745,59;39760;39761(number_key2) | #UDGARRAY2,4,,2;39776;39777,60;39792;39793(number_key3) }} TABLE#
B 39680,128,16
b 39808 Attributes for the code entry screen
D 39808 Used by the routine at #R34499.
B 39808,128,16
u 39936 Source code remnants
D 39936 The source code here corresponds to the code at #R35545.
T 39936 [JR ]NZ,ENDPAUSE
M 39947,9 INC E
W 39947
B 39949
T 39950,6,B1:3:B1:1
M 39956,15 JR NZ,PAUSE
W 39956
B 39958
T 39959,12,B1:2:B1:8
M 39971,9 INC D
W 39971
B 39973
T 39974,6,B1:3:B1:1
M 39980,15 JR NZ,PAUSE
W 39980
B 39982
T 39983,12,B1:2:B1:8
M 39995,5 C[P 10]
W 39995
B 39997
T 39998,2,B1:1
b 40000 Foot/barrel graphic data
D 40000 Used by the routine at #R35914 to display the game over sequence.
D 40000 The foot also appears as a guardian in #R56576(The Nightmare Room).
{foot}
D 40032 The barrel also appears as a guardian in #R54272(Ballroom East) and #R57856(Top Landing).
{barrel}
b 40064 Maria sprite graphic data
D 40064 Used by the routine at #R38196 to draw Maria in #R58112(Master Bedroom).
D 40064 Maria also appears as a guardian in #R56576(The Nightmare Room).
{maria}
b 40192 Willy sprite graphic data
D 40192 Used by the routines at #R35211 and #R38455.
{willy}
b 40448 Codes
D 40448 Used by the routine at #R34499.
{codes}
u 40627
C 40627
S 40704
b 40960 Guardian definitions
D 40960 Used by the routine at #R35068.
{guardian_defs}
D 41856 The next 127 bytes are unused.
B 41856,127,16
b 41983 Index of first object
D 41983 Used by the routines at #R34762 and #R37841.
b 41984 Object table
D 41984 Used by the routines at #R34762 and #R37841.
D 41984 The location of object N (173<=N<=255) is defined by the pair of bytes at addresses 41984+N and 42240+N. The meaning of the bits in each byte-pair is as follows:
D 41984 #TABLE(default,centre) {{ =h Bit(s) | =h Meaning }} {{ 15 | Most significant bit of the y-coordinate }} {{ 14 | Collection flag (reset=collected, set=uncollected) }} {{ 8-13 | Room number }} {{ 5-7 | Least significant bits of the y-coordinate }} {{ 0-4 | x-coordinate }} TABLE#
{object_table}
b 42496 Toilet graphics
D 42496 Used by the routine at #R38298.
{toilet}
u 42624
B 42624,128,16
S 42752
b 43776 Guardian graphics
D 43776 Used by the routine at #R37310.
{guardians}
{rooms}
u 64768 Unused TRS-DOS code
C 64768
B 65005,136,16
T 65141
C 65147
B 65203,2
T 65205
C 65236
B 65410,16,8
C 65426
S 65517
